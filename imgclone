#!/usr/bin/env python3
#	imgclone - Safely clone a image on multiple block devices parallel
#	Copyright (C) 2022-2023 Johannes Bauer
#
#	This file is part of imgclone.
#
#	imgclone is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	imgclone is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with imgclone; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import re
import subprocess
import asyncio
import time
from FriendlyArgumentParser import FriendlyArgumentParser

class ImageCloner():
	_DISK_NAME = re.compile("^\s+Model: \"(?P<name>[^,]+?)\"$", flags = re.MULTILINE)

	def __init__(self, args):
		self._args = args
		self._disk_regex = re.compile(f"\s*(?P<major>\d+)\s+(?P<minor>\d+)\s+(?P<blocks>\d+)\s+(?P<disk>{self._args.disk_regex})")

	def _list_disks(self):
		with open("/proc/partitions") as f:
			for line in f:
				line = line.rstrip("\r\n")
				result = self._disk_regex.fullmatch(line)
				if result is None:
					continue
				result = result.groupdict()
				for key in [ "major", "minor", "blocks" ]:
					result[key] = int(result[key])
				if self._args.verbose >= 3:
					print(f"Found disk: {result}")
				yield result

	def _resolve_name(self, dev):
		stdout = subprocess.check_output([ "hwinfo", "--disk", f"--only={dev}" ]).decode()
		name = self._DISK_NAME.search(stdout)
		name = name.groupdict()
		return name["name"]

	async def _run_disk(self, disk):
		async with self._sem:
			print(f"Started dd on {disk['dev']}")
			t0 = time.time()
			cmd = [ "dd", f"if={self._args.img_filename}", f"of={disk['dev']}", "bs=1M" ]
			proc = await asyncio.create_subprocess_exec(*cmd)
			await proc.wait()
			tsec = time.time() - t0
			print(f"Finished dd on {disk['dev']} after {tsec:.0f} secs")

	async def _run(self, considered):
		self._sem = asyncio.Semaphore(self._args.parallel)
		tasks = [ ]
		for disk in considered:
			task = asyncio.create_task(self._run_disk(disk))
			tasks.append(task)
		await asyncio.gather(*tasks)

	def run(self):
		disks = list(self._list_disks())
		considered = [ ]
		for disk in disks:
			disk["dev"] = f"/dev/{disk['disk']}"
			disk["name"] = self._resolve_name(disk["dev"])
			if self._args.verbose >= 2:
				print(f"Resolved disk: {disk}")

			if (disk["name"] in self._args.disk_name) and (disk["blocks"] in self._args.disk_size):
				considered.append(disk)
			else:
				if self._args.verbose >= 1:
					print(f"{disk['name']} not matched: name {'matches' if (disk['name'] in self._args.disk_name) else 'does not match'}, size {'matches' if (disk['blocks'] in self._args.disk_size) else 'does not match'}")

		if len(considered) == 0:
			print("Error: No disks found to consider.")
			return 1

		print(f"Considering {len(considered)} disk(s):")
		for disk in considered:
			print(f"   {disk['dev']:<15s} {disk['name']:<40s} {disk['blocks']/1024/1024:5.1f} GiB")
		if self._args.dryrun:
			print("Not writing anything, dry run.")
			return 1

		yn = input(f"Proceed with {self._args.parallel} dd processes? Type 'YES': ")
		if yn != "YES":
			print("Aborted.")
			return 1

		t0 = time.time()
		asyncio.run(self._run(considered))
		subprocess.check_call([ "sync" ])
		t1 = time.time()
		tsec = t1 - t0
		print(f"Finished after {tsec:.0f} secs")

		return 0

parser = FriendlyArgumentParser(description = "Clone a disk image onto multiple USB sticks at the same time.")
parser.add_argument("-d", "--dryrun", action = "store_true", help = "Do not write anything, only show what was found.")
parser.add_argument("-p", "--parallel", metavar = "count", type = int, default = 4, help = "How many dd processes to run concurrently. Defaults to %(default)d.")
parser.add_argument("-n", "--disk-name", metavar = "name", action = "append", default = [ ], require = True, help = "Disk name to require. Can be specified multiple times for different acceptable options. Must match that of hdparm -i. Required argument.")
parser.add_argument("-s", "--disk-size", metavar = "blocks", type = int, action = "append", default = [ ], required = True, help = "Disk size to enforce, in blocks. Must match that in /proc/partitions. Can be specified multiple times for different acceptable options. Required argument.")
parser.add_argument("-r", "--disk-regex", metavar = "regex", default = "sd[a-z]", help = "Disk devicename regex to consider. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("img_filename", help = "Image filename to clone")
args = parser.parse_args(sys.argv[1:])

img_cloner = ImageCloner(args)
sys.exit(img_cloner.run())
